rtoolspath, " before continuing.\n", sep=""))
}
} else {
try(download.file("https://eternallybored.org/misc/wget/current/wget64.exe", "wget.exe"))
}
}
}
if (Sys.which("wget") == ""){
stop("wget is not available. Please install manually before continuing.");
}
if (Sys.which("wget") != ""){
download.file(url, to, method="wget", extra="--progress=dot --no-check-certificate");
}
}
rxPythonBaseWin <- function(){
if(.Platform$OS.type == "unix"){
} else {
keys <- NULL;
keys <- try(utils::readRegistry("SOFTWARE\\Python\\PythonCore", hive = "HCU", ## view = "32-bit",
maxdepth = 3), silent=TRUE);
if (is.null(keys) || length(keys) == 0 || inherits(keys, "try-error")){
try(keys <- utils::readRegistry("SOFTWARE\\Python\\PythonCore", hive = "HLM", ## view = "32-bit",
maxdepth = 3), silent = TRUE);
}
python.base <- NULL
for (i in seq_along(keys)){
try(python.base <- keys[[i]]$InstallPath$`(Default)`, silent=TRUE)
if (!is.null(python.base)){
if (file.exists(file.path(python.base, "python.exe"))){
break;
} else {
python.base <- NULL;
}
}
}
if (!is.null(python.base)){
python.base <- gsub("\\", "/", utils::shortPathName(gsub(rex::rex(any_of("/", "\\"), end), "", python.base)), fixed=TRUE);
}
return(python.base)
}
}
##' Return Rtools base
##'
##' @return Rtools base path, or "" on unix-style platforms.
##' @author Matthew L. Fidler
rxRtoolsBaseWin <- function(){
if(.Platform$OS.type == "unix"){
return("");
} else {
if (length(grep("rtools", tolower(Sys.which("gcc.exe"))))==0) {
stop("RxODE cannot be installed, since Rtools isn't set up appropriately. Please (re)install it and try again.\n")
}
# if (!file.exists(rtools.base)){
#     keys <- NULL
#     try(keys <- utils::readRegistry("SOFTWARE\\R-core\\Rtools", hive = "HCU", view = "32-bit", maxdepth = 2), silent = TRUE)
#     if (is.null(keys) || length(keys) == 0)
#         try(keys <- utils::readRegistry("SOFTWARE\\R-core\\Rtools", hive = "HLM", view = "32-bit", maxdepth = 2), silent = TRUE)
#     if (is.null(keys) || length(keys) == 0){
#         stop("Cannot use this package because Rtools isn't setup appropriately...")
#     }
#
#     for(i in seq_along(keys)) {
#         version <- names(keys)[[i]]
#         key <- keys[[version]]
#         if (!is.list(key) || is.null(key$InstallPath)) next;
#         install_path <- normalizePath(key$InstallPath, mustWork = FALSE, winslash = "/");
#         if (file.exists(install_path)){
#             rtools.base <- install_path;
#         }
#     }
# }
rtoolslist  <- paste(letters, ":/Rtools", sep="")
rtools.base <- rtoolslist[which(file.exists(rtoolslist, sep=""))]
return(rtools.base)
}
}
rtools.base <- rxRtoolsBaseWin();
if (file.exists(rtools.base)){
gcc <- list.files(rtools.base, "gcc",full.names=TRUE)[1]
}
list.files(rtools.base, "gcc",full.names=TRUE)
list.files(rtools.base)
list.files(paste(rtools.base, "/bin")
)
list.files(paste(rtools.base, "/bin", sep=""))
try(keys <- utils::readRegistry("SOFTWARE\\R-core\\Rtools", hive = "HCU", view = "32-bit", maxdepth = 2), silent = TRUE)
try(keys <- utils::readRegistry("SOFTWARE\\R-core\\Rtools", hive = "HLM", view = "32-bit", maxdepth = 2), silent = TRUE)
keys
for(i in seq_along(keys)) {
version <- names(keys)[[i]]
key <- keys[[version]]
if (!is.list(key) || is.null(key$InstallPath)) next;
install_path <- normalizePath(key$InstallPath, mustWork = FALSE, winslash = "/");
if (file.exists(install_path)){
rtools.base <- install_path;
}
}
rtoolslist  <- paste(letters, ":/Rtools", sep="")
rtools.base <- rtoolslist[which(file.exists(rtoolslist, sep=""))]
rtools.base <- rxRtoolsBaseWin();
if (file.exists(rtools.base)){
gcc <- list.files(rtools.base, "gcc",full.names=TRUE)[1]
if (is.na(gcc)){
gcc <- "";
}
for (x in rev(c(file.path(rtools.base, "bin"),
## file.path(rtools.base, "mingw_32/bin") ## Rtools sets up the mingw_32/bin first (even if x64)
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/opt/bin", "mingw_64/opt/bin"))
## ifelse(gcc == "", "", file.path(gcc, "bin")),
## ifelse(gcc == "", "", ifelse(.Platform$r_arch == "i386",file.path(gcc, "bin32"), file.path(gcc, "bin64"))
## )
))){
if (file.exists(x)){
path <- c(normalizePath(x), path);
}
}
if(.Platform$OS.type == "unix"){
return(TRUE)
} else {
path <- unique(sapply(gsub("/", "\\\\", strsplit(Sys.getenv("PATH"), ";")[[1]]), function(x){
if (file.exists(x)){
return(normalizePath(x));
} else {
return("");
}
}))
path <- path[path != ""];
if (rm.rtools){
path <- path[regexpr(rex::rex(or("Rtools", "RTOOLS", "rtools")), path) == -1]
}
r.path <- normalizePath(file.path(Sys.getenv("R_HOME"),paste0("bin",Sys.getenv("R_ARCH"))));
path <- c(r.path, path);
## Look in the registry...
## This is taken from devtools and adapted.
rtools.base <- rxRtoolsBaseWin();
if (file.exists(rtools.base)){
gcc <- list.files(rtools.base, "gcc",full.names=TRUE)[1]
if (is.na(gcc)){
gcc <- "";
}
for (x in rev(c(file.path(rtools.base, "bin"),
## file.path(rtools.base, "mingw_32/bin") ## Rtools sets up the mingw_32/bin first (even if x64)
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/opt/bin", "mingw_64/opt/bin"))
## ifelse(gcc == "", "", file.path(gcc, "bin")),
## ifelse(gcc == "", "", ifelse(.Platform$r_arch == "i386",file.path(gcc, "bin32"), file.path(gcc, "bin64"))
## )
))){
if (file.exists(x)){
path <- c(normalizePath(x), path);
}
}
python.base <- rxPythonBaseWin();
if (!is.null(python.base)){
python <- normalizePath(file.path(python.base, "python.exe"));
if (file.exists(python)){
Sys.setenv(PYTHON_EXE=python); ## For PythonInR
path <- c(normalizePath(python.base), path);
Sys.setenv(PYTHONHOME=python.base);
lib.path <- file.path(python.base, "Lib");
if (length(list.files(lib.path)) > 0){
Sys.setenv(PYTHONPATH=paste(python.base, normalizePath(lib.path), collapse=";"));
}
}
}
## java <- as.vector(Sys.which("java"));
## if (java != ""){
##     java <- sub(rex::rex(one_of("/", "\\"), except_any_of("/", "\\", "\n"), end), "", java)
## }
keys <- NULL;
## Is there a 64 bit aspell that should be checked for...?
keys <- try(utils::readRegistry("SOFTWARE\\Aspell", hive="HLM", view="32-bit", maxdepth=3), silent=TRUE);
## Add aspell for cran checks...
if (!is.null(keys)){
if (any(names(keys) == "Path")){
if (file.exists(keys$Path)){
path <- c(normalizePath(keys$Path), path);
}
}
}
path <- path[path != ""];
path <- paste(unique(path), collapse=";");
Sys.setenv(PATH=path);
return(TRUE);
} else {
return(FALSE)
}
}
rm.rtools<-F
if(.Platform$OS.type == "unix"){
return(TRUE)
} else {
path <- unique(sapply(gsub("/", "\\\\", strsplit(Sys.getenv("PATH"), ";")[[1]]), function(x){
if (file.exists(x)){
return(normalizePath(x));
} else {
return("");
}
}))
path <- path[path != ""];
if (rm.rtools){
path <- path[regexpr(rex::rex(or("Rtools", "RTOOLS", "rtools")), path) == -1]
}
r.path <- normalizePath(file.path(Sys.getenv("R_HOME"),paste0("bin",Sys.getenv("R_ARCH"))));
path <- c(r.path, path);
## Look in the registry...
## This is taken from devtools and adapted.
rtools.base <- rxRtoolsBaseWin();
if (file.exists(rtools.base)){
gcc <- list.files(rtools.base, "gcc",full.names=TRUE)[1]
if (is.na(gcc)){
gcc <- "";
}
for (x in rev(c(file.path(rtools.base, "bin"),
## file.path(rtools.base, "mingw_32/bin") ## Rtools sets up the mingw_32/bin first (even if x64)
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/opt/bin", "mingw_64/opt/bin"))
## ifelse(gcc == "", "", file.path(gcc, "bin")),
## ifelse(gcc == "", "", ifelse(.Platform$r_arch == "i386",file.path(gcc, "bin32"), file.path(gcc, "bin64"))
## )
))){
if (file.exists(x)){
path <- c(normalizePath(x), path);
}
}
python.base <- rxPythonBaseWin();
if (!is.null(python.base)){
python <- normalizePath(file.path(python.base, "python.exe"));
if (file.exists(python)){
Sys.setenv(PYTHON_EXE=python); ## For PythonInR
path <- c(normalizePath(python.base), path);
Sys.setenv(PYTHONHOME=python.base);
lib.path <- file.path(python.base, "Lib");
if (length(list.files(lib.path)) > 0){
Sys.setenv(PYTHONPATH=paste(python.base, normalizePath(lib.path), collapse=";"));
}
}
}
## java <- as.vector(Sys.which("java"));
## if (java != ""){
##     java <- sub(rex::rex(one_of("/", "\\"), except_any_of("/", "\\", "\n"), end), "", java)
## }
keys <- NULL;
## Is there a 64 bit aspell that should be checked for...?
keys <- try(utils::readRegistry("SOFTWARE\\Aspell", hive="HLM", view="32-bit", maxdepth=3), silent=TRUE);
## Add aspell for cran checks...
if (!is.null(keys)){
if (any(names(keys) == "Path")){
if (file.exists(keys$Path)){
path <- c(normalizePath(keys$Path), path);
}
}
}
path <- path[path != ""];
path <- paste(unique(path), collapse=";");
Sys.setenv(PATH=path);
return(TRUE);
} else {
return(FALSE)
}
}
rxWinRtoolsPath <- function(rm.rtools=TRUE){
## Note that devtools seems to assume that rtools/bin is setup appropriately, and figures out the c compiler from there.
if(.Platform$OS.type == "unix"){
return(TRUE)
} else {
path <- unique(sapply(gsub("/", "\\\\", strsplit(Sys.getenv("PATH"), ";")[[1]]), function(x){
if (file.exists(x)){
return(normalizePath(x));
} else {
return("");
}
}))
path <- path[path != ""];
if (rm.rtools){
path <- path[regexpr(rex::rex(or("Rtools", "RTOOLS", "rtools")), path) == -1]
}
r.path <- normalizePath(file.path(Sys.getenv("R_HOME"),paste0("bin",Sys.getenv("R_ARCH"))));
path <- c(r.path, path);
## Look in the registry...
## This is taken from devtools and adapted.
rtools.base <- rxRtoolsBaseWin();
if (file.exists(rtools.base)){
gcc <- list.files(rtools.base, "gcc",full.names=TRUE)[1]
if (is.na(gcc)){
gcc <- "";
}
for (x in rev(c(file.path(rtools.base, "bin"),
## file.path(rtools.base, "mingw_32/bin") ## Rtools sets up the mingw_32/bin first (even if x64)
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/opt/bin", "mingw_64/opt/bin"))
## ifelse(gcc == "", "", file.path(gcc, "bin")),
## ifelse(gcc == "", "", ifelse(.Platform$r_arch == "i386",file.path(gcc, "bin32"), file.path(gcc, "bin64"))
## )
))){
if (file.exists(x)){
path <- c(normalizePath(x), path);
}
}
python.base <- rxPythonBaseWin();
if (!is.null(python.base)){
python <- normalizePath(file.path(python.base, "python.exe"));
if (file.exists(python)){
Sys.setenv(PYTHON_EXE=python); ## For PythonInR
path <- c(normalizePath(python.base), path);
Sys.setenv(PYTHONHOME=python.base);
lib.path <- file.path(python.base, "Lib");
if (length(list.files(lib.path)) > 0){
Sys.setenv(PYTHONPATH=paste(python.base, normalizePath(lib.path), collapse=";"));
}
}
}
## java <- as.vector(Sys.which("java"));
## if (java != ""){
##     java <- sub(rex::rex(one_of("/", "\\"), except_any_of("/", "\\", "\n"), end), "", java)
## }
keys <- NULL;
## Is there a 64 bit aspell that should be checked for...?
keys <- try(utils::readRegistry("SOFTWARE\\Aspell", hive="HLM", view="32-bit", maxdepth=3), silent=TRUE);
## Add aspell for cran checks...
if (!is.null(keys)){
if (any(names(keys) == "Path")){
if (file.exists(keys$Path)){
path <- c(normalizePath(keys$Path), path);
}
}
}
path <- path[path != ""];
path <- paste(unique(path), collapse=";");
Sys.setenv(PATH=path);
return(TRUE);
} else {
return(FALSE)
}
}
}
rxWinRtoolsPath()
base <- rxPythonBaseWin()
if (is.null(base)){
stop("This requires python.  Please setup and add to path.")
}
rxWinRtoolsPath(rm.rtools)
rxWinPythonSetup()
rxWinPythonSetup <- function(){
base <- rxPythonBaseWin()
if (is.null(base)){
stop("RxODE requires Python. Please install an appropriate version and add it to the system path.")
}
message("Attempting to install simpy. This may take a few seconds...")
try(system("python -m pip install sympy"))
message("Attempting to install SnakeCharmR. This may take a few seconds...")
if (!requireNamespace("SnakeCharmR", quietly = TRUE)){
devtools::install_github("asieira/SnakeCharmR");
}
message("Please restart your R session before using RxODE with sympy.")
}
rxWinPythonSetup()
Sys.getenv()
paste(python.base, normalizePath(lib.path), collapse=";")
base <- rxPythonBaseWin()
if (is.null(base)){
stop("RxODE requires Python. Please install an appropriate version and add it to the system path.")
}
base
paste(python.base, normalizePath(lib.path), sep=";")
?file.access
file.access("C:\\Program Files\\Python36\\Lib",2)
file.access("C:\\Program Files\\Python36\\Lib",2)==-1
file.path(python.base, "Lib")
python.base <- rxPythonBaseWin();
file.path(python.base, "Lib")
file.path(python.base, "Lib\\site-packages")
file.path(python.base, "Lib/site-packages")
base <- rxPythonBaseWin()
paste(base, "\\Lib\\site-packages", sep="")
paste(base, "\\Lib\\site-packages", sep="")
file.access(paste(base, "/Lib/site-packages", sep=""),2)
stop("The Python library path does not appear to be writeable. Please install sympy manually, using the following command -\npython -m pip install sympy\n- and then restart R.")
rxWinPythonSetup <- function(){
base <- rxPythonBaseWin()
if (is.null(base)){
stop("RxODE requires Python. Please install an appropriate version and add it to the system path.")
}
if (file.access(paste(base, "/Lib/site-packages", sep=""),2)==-1){
stop("The Python library path does not appear to be writeable. Please install sympy manually, using the following command -\npython -m pip install sympy\n- and then restart R.")
}
message("Attempting to install simpy. This may take a few seconds...")
try(system("python -m pip install sympy"))
if (!requireNamespace("SnakeCharmR", quietly = TRUE)){
message("Attempting to install SnakeCharmR. This may take a few seconds...")
devtools::install_github("asieira/SnakeCharmR");
}
message("Please restart your R session before using RxODE with sympy.")
}
rxWinPythonSetup()
rxWinPythonSetup <- function(){
base <- rxPythonBaseWin()
if (is.null(base)){
stop("RxODE requires Python. Please install an appropriate version and add it to the system path.")
}
if (file.access(paste(base, "/Lib/site-packages", sep=""),2)==-1){
stop("The Python library path does not appear to be writeable. Please rectify this situation, restart R, and try again.")
}
message("Attempting to install simpy. This may take a few seconds...")
try(system("python -m pip install sympy"))
if (!requireNamespace("SnakeCharmR", quietly = TRUE)){
message("Attempting to install SnakeCharmR. This may take a few seconds...")
devtools::install_github("asieira/SnakeCharmR");
}
message("Please restart your R session before using RxODE with sympy.")
}
}
rxWinPythonSetup <- function(){
base <- rxPythonBaseWin()
if (is.null(base)){
stop("RxODE requires Python. Please install an appropriate version and add it to the system path.")
}
if (file.access(paste(base, "/Lib/site-packages", sep=""),2)==-1){
stop("The Python library path does not appear to be writeable. Please rectify this situation, restart R, and try again.")
}
message("Attempting to install simpy. This may take a few seconds...")
try(system("python -m pip install sympy"))
if (!requireNamespace("SnakeCharmR", quietly = TRUE)){
message("Attempting to install SnakeCharmR. This may take a few seconds...")
devtools::install_github("asieira/SnakeCharmR");
}
message("Please restart your R session before using RxODE with sympy.")
}
rxWinPythonSetup()
rxWinPythonSetup()
rm.rtools <- F
if(.Platform$OS.type == "unix"){
return(TRUE)
} else {
path <- unique(sapply(gsub("/", "\\\\", strsplit(Sys.getenv("PATH"), ";")[[1]]), function(x){
if (file.exists(x)){
return(normalizePath(x));
} else {
return("");
}
}))
path <- path[path != ""];
if (rm.rtools){
path <- path[regexpr(rex::rex(or("Rtools", "RTOOLS", "rtools")), path) == -1]
}
r.path <- normalizePath(file.path(Sys.getenv("R_HOME"),paste0("bin",Sys.getenv("R_ARCH"))));
path <- c(r.path, path);
## Look in the registry...
## This is taken from devtools and adapted.
rtools.base <- rxRtoolsBaseWin();
if (file.exists(rtools.base)){
gcc <- list.files(rtools.base, "gcc",full.names=TRUE)[1]
if (is.na(gcc)){
gcc <- "";
}
for (x in rev(c(file.path(rtools.base, "bin"),
## file.path(rtools.base, "mingw_32/bin") ## Rtools sets up the mingw_32/bin first (even if x64)
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/bin", "mingw_64/bin")),
file.path(rtools.base, ifelse(.Platform$r_arch == "i386","mingw_32/opt/bin", "mingw_64/opt/bin"))
## ifelse(gcc == "", "", file.path(gcc, "bin")),
## ifelse(gcc == "", "", ifelse(.Platform$r_arch == "i386",file.path(gcc, "bin32"), file.path(gcc, "bin64"))
## )
))){
if (file.exists(x)){
path <- c(normalizePath(x), path);
}
}
python.base <- rxPythonBaseWin();
if (!is.null(python.base)){
python <- normalizePath(file.path(python.base, "python.exe"));
if (file.exists(python)){
Sys.setenv(PYTHON_EXE=python); ## For PythonInR
path <- c(normalizePath(python.base), path);
Sys.setenv(PYTHONHOME=python.base);
lib.path <- file.path(python.base, "Lib");
if (length(list.files(lib.path)) > 0){
Sys.setenv(PYTHONPATH=paste(python.base, normalizePath(lib.path), sep=";"));
}
}
}
## java <- as.vector(Sys.which("java"));
## if (java != ""){
##     java <- sub(rex::rex(one_of("/", "\\"), except_any_of("/", "\\", "\n"), end), "", java)
## }
keys <- NULL;
## Is there a 64 bit aspell that should be checked for...?
keys <- try(utils::readRegistry("SOFTWARE\\Aspell", hive="HLM", view="32-bit", maxdepth=3), silent=TRUE);
## Add aspell for cran checks...
if (!is.null(keys)){
if (any(names(keys) == "Path")){
if (file.exists(keys$Path)){
path <- c(normalizePath(keys$Path), path);
}
}
}
path <- path[path != ""];
path <- paste(unique(path), collapse=";");
Sys.setenv(PATH=path);
return(TRUE);
} else {
return(FALSE)
}
}
path
devtools::install_github("nlmixrdevelopment/RxODE")
devtools::install_github("nlmixrdevelopment/RxODE")
