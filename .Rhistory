)
runno <- "N026"
dat <- datr
fitODE <-
nlme_ode(
dat,
model = ode1KA,
par_model = specs4i,
par_trans = mypar4,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .1, msVerbose = TRUE)
)
z <- VarCorr(fitODE)
expect_equal(signif(as.numeric(fitODE$logLik),6), -37489.3)
expect_equal(signif(AIC(fitODE), 6), 74992.6)
expect_equal(signif(BIC(fitODE), 6), 75040.5)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]),3), 1.39)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]),3), 4.2)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[3]),3), -0.00466)
expect_equal(signif(as.numeric(z[1, "StdDev"]), 3), 0.259)
expect_equal(signif(as.numeric(z[2, "StdDev"]), 3), 0.277)
expect_equal(signif(as.numeric(z[3, "StdDev"]), 3), 0.325)
expect_equal(signif(fitODE$sigma, 3), 0.198)
sink("output.txt")
test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
Sys.setenv(NLMIXR_VALIDATION="true")
test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
datr <-
read.csv("Infusion_1CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 10101, datr$EVID)
datr <- datr[datr$EVID != 2, ]
datIV <- datr[datr$AMT > 0, ]
datIV$TIME <- datIV$TIME + (datIV$AMT / datIV$RATE)
datIV$AMT  <- -1 * datIV$AMT
datr <- rbind(datr, datIV)
datr <- datr[order(datr$ID, datr$TIME), ]
specs1m <-
list(
fixed = lCL + lV ~ 1,
random = pdDiag(lCL + lV ~ 1),
start = c(lCL = 1.3, lV = 4)
)
ode1 <- "
d/dt(centr)  = -(CL/V)*centr;
"
mypar1 <- function(lCL, lV)
{
CL <- exp(lCL)
V <- exp(lV)
}
runno <- "N015"
dat <- datr
fitODE <-
nlme_ode(
dat,
model = ode1,
par_model = specs1m,
par_trans = mypar1,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .1, msVerbose = TRUE)
)
z <- summary(fitODE)
expect_equal(signif(as.numeric(fitODE$logLik),6), -37861.1)
expect_equal(signif(AIC(fitODE), 6), 75732.3)
expect_equal(signif(BIC(fitODE), 6), 75766.5)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]),3), 1.39)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]),3), 4.27)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[1], 3)), 0.280)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[2], 3)), 0.305)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[3], 3)), 0.200)
Sys.setenv(NLMIXR_VALIDATION_FULL="true")
test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
datr <-
read.csv("Infusion_1CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 10101, datr$EVID)
datr <- datr[datr$EVID != 2,]
datSSobs <- datr[datr$SS == 0,]
datSD <- datr[datr$SS == 1,]
#general solution to allow different times of SS dose and different II values per subject:
datSSD <- datSD[, c("ID","TIME","II")]
specs1 <-
list(
fixed = lCL + lV ~ 1,
random = pdDiag(lCL + lV ~ 1),
start = c(lCL = 1.5, lV = 4)
)
ode1 <- "
d/dt(centr)  = -(CL/V)*centr;
"
mypar1 <- function(lCL, lV)
{
CL <- exp(lCL)
V <- exp(lV)
}
#updates datSSD with 7 columns to account for the new dosing times
datSSD$V0<-datSSD$TIME
datSSD$V1<-datSSD$TIME-datSSD$II
datSSD$V2<-datSSD$TIME-2*datSSD$II
datSSD$V3<-datSSD$TIME-3*datSSD$II
datSSD$V4<-datSSD$TIME-4*datSSD$II
datSSD$V5<-datSSD$TIME-5*datSSD$II
datSSD$V6<-datSSD$TIME-6*datSSD$II
datSSD$TIME<-NULL
datSSD$II<-NULL
index <- melt(datSSD, id.vars = c("ID"), value.name = "TIMED")
index$variable <- NULL
index <- index[index$TIMED > 0,]
index<-index[order(index$ID,index$TIMED),]
datSD2 <- merge(datSD, index, by = c("ID"), all = TRUE)
datSD2$TIME <- datSD2$TIMED
datSD2$TIMED <- NULL
datSDoff <- datSD2
datSDoff$TIME <- datSDoff$TIME + datSDoff$AMT / datSDoff$RATE
datSDoff$AMT <- -1 * datSDoff$AMT
datSD2 <- rbind(datSD2, datSDoff)
datSS <- rbind(datSSobs, datSD2)
datSS <- datSS[order(datSS$ID,datSS$TIME),]
runno <- "N014"
dat <- datSS
fitODE <-
nlme_ode(
dat,
model = ode1,
par_model = specs1,
par_trans = mypar1,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .01, msVerbose = TRUE)
)
z <- summary(fitODE)
expect_equal(signif(as.numeric(fitODE$logLik),6), -12668.1)
expect_equal(signif(AIC(fitODE), 6), 25346.1)
expect_equal(signif(BIC(fitODE), 6), 25374.8)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]),3), 1.39)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]),3), 4.26)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[1], 3)), 0.276)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[2], 3)), 0.298)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[3], 3)), 0.196)
datr <-
read.csv("Infusion_1CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 10101, datr$EVID)
datr <- datr[datr$EVID != 2,]
datSSobs <- datr[datr$SS == 0,]
datSD <- datr[datr$SS == 1,]
#general solution to allow different times of SS dose and different II values per subject:
datSSD <- datSD[, c("ID","TIME","II")]
specs1 <-
list(
fixed = lCL + lV ~ 1,
random = pdDiag(lCL + lV ~ 1),
start = c(lCL = 1.4, lV = 4.3)
)
ode1 <- "
d/dt(centr)  = -(CL/V)*centr;
"
mypar1 <- function(lCL, lV)
{
CL <- exp(lCL)
V <- exp(lV)
}
#updates datSSD with 7 columns to account for the new dosing times
datSSD$V0<-datSSD$TIME
datSSD$V1<-datSSD$TIME-datSSD$II
datSSD$V2<-datSSD$TIME-2*datSSD$II
datSSD$V3<-datSSD$TIME-3*datSSD$II
datSSD$V4<-datSSD$TIME-4*datSSD$II
datSSD$V5<-datSSD$TIME-5*datSSD$II
datSSD$V6<-datSSD$TIME-6*datSSD$II
datSSD$TIME<-NULL
datSSD$II<-NULL
index <- melt(datSSD, id.vars = c("ID"), value.name = "TIMED")
index$variable <- NULL
index <- index[index$TIMED > 0,]
index<-index[order(index$ID,index$TIMED),]
datSD2 <- merge(datSD, index, by = c("ID"), all = TRUE)
datSD2$TIME <- datSD2$TIMED
datSD2$TIMED <- NULL
datSDoff <- datSD2
datSDoff$TIME <- datSDoff$TIME + datSDoff$AMT / datSDoff$RATE
datSDoff$AMT <- -1 * datSDoff$AMT
datSD2 <- rbind(datSD2, datSDoff)
datSS <- rbind(datSSobs, datSD2)
datSS <- datSS[order(datSS$ID,datSS$TIME),]
runno <- "N014"
dat <- datSS
fitODE <-
nlme_ode(
dat,
model = ode1,
par_model = specs1,
par_trans = mypar1,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .01, msVerbose = TRUE)
)
z <- summary(fitODE)
sink()
expect_equal(signif(as.numeric(fitODE$logLik),6), -12668.1)
expect_equal(signif(AIC(fitODE), 6), 25346.1)
expect_equal(signif(BIC(fitODE), 6), 25374.8)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]),3), 1.39)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]),3), 4.26)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[1], 3)), 0.276)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[2], 3)), 0.298)
expect_equal(as.numeric(signif(exp(attr(z$apVar, "Pars"))[3], 3)), 0.196)
signif(as.numeric(fitODE$logLik),6)
signif(AIC(fitODE), 6)
signif(BIC(fitODE), 6)
datr <-
read.csv("ORAL_1CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 101, datr$EVID)
datr <- datr[datr$EVID != 2,]
ode1KA <- "
d/dt(abs)    = -KA*abs;
d/dt(centr)  =  KA*abs-(CL/V)*centr;
"
mypar4 <- function(lCL, lV, lKA)
{
CL <- exp(lCL)
V <- exp(lV)
KA <- exp(lKA)
}
specs4 <-
list(
fixed = lCL + lV + lKA ~ 1,
random = pdDiag(lCL + lV + lKA ~ 1),
start = c(lCL = 1, lV = 4, lKA = 0)
)
runno <- "N024"
dat <- datr[datr$SD == 0,]
fitODE <-
nlme_ode(
dat,
model = ode1KA,
par_model = specs4i,
par_trans = mypar4,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .1, msVerbose = TRUE)
)
z <- VarCorr(fitODE)
expect_equal(signif(as.numeric(fitODE$logLik),6), -26145.9)
expect_equal(signif(AIC(fitODE), 6), 52305.7)
expect_equal(signif(BIC(fitODE), 6), 52350.9)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]),3), 1.39)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]),3), 4.2)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[3]),3), -0.0129)
expect_equal(signif(as.numeric(z[1, "StdDev"]), 3), 0.264)
expect_equal(signif(as.numeric(z[2, "StdDev"]), 3), 0.282)
expect_equal(signif(as.numeric(z[3, "StdDev"]), 3), 0.338)
expect_equal(signif(fitODE$sigma, 3), 0.198)
signif(as.numeric(fitODE$logLik),6)
signif(AIC(fitODE), 6)
signif(BIC(fitODE), 6)
signif(as.numeric(fitODE$coefficients$fixed[1]),3)
signif(as.numeric(fitODE$coefficients$fixed[2]),3)
signif(as.numeric(fitODE$coefficients$fixed[3]),3)
signif(as.numeric(z[1, "StdDev"]), 3)
signif(as.numeric(z[2, "StdDev"]), 3)
signif(as.numeric(z[3, "StdDev"]), 3)
signif(fitODE$sigma, 3)
datr <- read.csv("ORAL_2CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 101, datr$EVID)
datr <- datr[datr$EVID != 2,]
datSS <- datr[datr$SS==0,]
datSD <- datr[datr$SS==1,]
#general solution to allow different times of SS dose and different II values per subject:
datSSD <- datr[datr$SS==1, c("ID","TIME","II")]
datSSD$V0<-datSSD$TIME
datSSD$V1<-datSSD$TIME-datSSD$II
datSSD$V2<-datSSD$TIME-2*datSSD$II
datSSD$V3<-datSSD$TIME-3*datSSD$II
datSSD$V4<-datSSD$TIME-4*datSSD$II
datSSD$V5<-datSSD$TIME-5*datSSD$II
datSSD$V6<-datSSD$TIME-6*datSSD$II
datSSD$TIME<-NULL
datSSD$II<-NULL
index <- melt(datSSD, id.vars = c("ID"), value.name = "TIMED")
index$variable <- NULL
index <- index[index$TIMED > 0,]
index<-index[order(index$ID,index$TIMED),]
#much easier solution if you know the time of SS dose and the II and if it is the same for all
#index<-CJ(ID=datSSD$ID,TIMED=seq(192,0,-24))
datSD2 <- merge(datSD, index, by = c("ID"), all=T)
datSD2$TIME <- datSD2$TIMED
datSD2$TIMED <- NULL
datSS <- rbind(datSS, datSD2)
datSS <- datSS[order(datSS$ID, datSS$TIME),]
dat <- datSS
datr <- read.csv("ORAL_2CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 101, datr$EVID)
datr <- datr[datr$EVID != 2, ]
datSS <- datr[datr$SS == 0, ]
datSD <- datr[datr$SS == 1, ]
#general solution to allow different times of SS dose and different II values per subject:
datSSD <- datr[datr$SS == 1, c("ID", "TIME", "II")]
datSSD$V0 <- datSSD$TIME
datSSD$V1 <- datSSD$TIME - datSSD$II
datSSD$V2 <- datSSD$TIME - 2 * datSSD$II
datSSD$V3 <- datSSD$TIME - 3 * datSSD$II
datSSD$V4 <- datSSD$TIME - 4 * datSSD$II
datSSD$V5 <- datSSD$TIME - 5 * datSSD$II
datSSD$V6 <- datSSD$TIME - 6 * datSSD$II
datSSD$TIME <- NULL
datSSD$II <- NULL
index <- melt(datSSD, id.vars = c("ID"), value.name = "TIMED")
index$variable <- NULL
index <- index[index$TIMED > 0, ]
index <- index[order(index$ID, index$TIMED), ]
#much easier solution if you know the time of SS dose and the II and if it is the same for all
#index<-CJ(ID=datSSD$ID,TIMED=seq(192,0,-24))
datSD2 <- merge(datSD, index, by = c("ID"), all = T)
datSD2$TIME <- datSD2$TIMED
datSD2$TIMED <- NULL
datSS <- rbind(datSS, datSD2)
datSS <- datSS[order(datSS$ID, datSS$TIME), ]
dat <- datSS
specs8i <-
list(
fixed = lCL + lV + lCLD + lVT + lKA ~ 1,
random = pdDiag(value = diag(c(6, 6, 6, 6, 6)), form = lCL + lV + lCLD +
lVT + lKA ~ 1),
start = c(
lCL = 1.4,
lV = 4.2,
lCLD = 1.3,
lVT = 3.9,
lKA = 0.1
)
)
runno <- "N062"
ode2KA <- "
d/dt(abs)    = -KA*abs;
d/dt(centr)  =  KA*abs+K21*periph-K12*centr-K10*centr;
d/dt(periph) =        -K21*periph+K12*centr;
"
mypar8 <- function(lCL, lV, lCLD, lVT, lKA)
{
CL <- exp(lCL)
V  <- exp(lV)
CLD <- exp(lCLD)
VT <- exp(lVT)
KA <- exp(lKA)
K10 <- CL / V
K12 <- CLD / V
K21 <- CLD / VT
}
fitODE <-
nlme_ode(
dat,
model = ode2KA,
par_model = specs8i,
par_trans = mypar8,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .15, msVerbose = TRUE)
)
z <- VarCorr(fitODE)
expect_equal(signif(as.numeric(fitODE$logLik), 6),-13224.4)
expect_equal(signif(AIC(fitODE), 6), 26470.9)
expect_equal(signif(BIC(fitODE), 6), 26533.9)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]), 3), 1.34)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]), 3), 4.28)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[3]), 3), 1.33)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[4]), 3), 3.76)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[5]), 3),-0.00741)
expect_equal(signif(as.numeric(z[1, "StdDev"]), 3), 0.321)
expect_equal(signif(as.numeric(z[2, "StdDev"]), 3), 0.297)
expect_equal(signif(as.numeric(z[3, "StdDev"]), 3), 0.45)
expect_equal(signif(as.numeric(z[4, "StdDev"]), 3), 0.00125)
expect_equal(signif(as.numeric(z[5, "StdDev"]), 3), 0.333)
expect_equal(signif(fit$sigma, 3), 0.199)
expect_equal(signif(fitODE$sigma, 3), 0.199)
sink("output.txt")
sink()
sink("output.txt")
test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
library(testthat)
test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
Sys.setenv(NLMIXR_VALIDATION_FULL="true")
Sys.setenv(NLMIXR_VALIDATION="true")
test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
datr <-
read.csv("ORAL_1CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 101, datr$EVID)
datr <- datr[datr$EVID != 2,]
ode1KA <- "
d/dt(abs)    = -KA*abs;
d/dt(centr)  =  KA*abs-(CL/V)*centr;
"
mypar4 <- function(lCL, lV, lKA)
{
CL <- exp(lCL)
V <- exp(lV)
KA <- exp(lKA)
}
specs4i <-
list(
fixed = lCL + lV + lKA ~ 1,
random = pdDiag(lCL + lV + lKA ~ 1),
start = c(lCL = 1, lV = 4, lKA = 0)
)
runno <- "N024"
dat <- datr[datr$SD == 0,]
fitODE <-
nlme_ode(
dat,
model = ode1KA,
par_model = specs4i,
par_trans = mypar4,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .1, msVerbose = TRUE)
)
z <- VarCorr(fitODE)
expect_equal(signif(as.numeric(fitODE$logLik),6), -26146)
expect_equal(signif(AIC(fitODE), 6), 52305.9)
expect_equal(signif(BIC(fitODE), 6), 52351)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]),3), 1.39)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]),3), 4.2)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[3]),3), -0.0123)
expect_equal(signif(as.numeric(z[1, "StdDev"]), 3), 0.264)
expect_equal(signif(as.numeric(z[2, "StdDev"]), 3), 0.281)
expect_equal(signif(as.numeric(z[3, "StdDev"]), 3), 0.343)
expect_equal(signif(fitODE$sigma, 3), 0.198)
setwd("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat")
datr <-
read.csv("ORAL_1CPT.csv",
header = TRUE,
stringsAsFactors = F)
datr$EVID <- ifelse(datr$EVID == 1, 101, datr$EVID)
datr <- datr[datr$EVID != 2,]
ode1KA <- "
d/dt(abs)    = -KA*abs;
d/dt(centr)  =  KA*abs-(CL/V)*centr;
"
mypar4 <- function(lCL, lV, lKA)
{
CL <- exp(lCL)
V <- exp(lV)
KA <- exp(lKA)
}
specs4i <-
list(
fixed = lCL + lV + lKA ~ 1,
random = pdDiag(lCL + lV + lKA ~ 1),
start = c(lCL = 1, lV = 4, lKA = 0)
)
runno <- "N024"
dat <- datr[datr$SD == 0,]
fitODE <-
nlme_ode(
dat,
model = ode1KA,
par_model = specs4i,
par_trans = mypar4,
response = "centr",
response.scaler = "V",
verbose = TRUE,
weight = varPower(fixed = c(1)),
control = nlmeControl(pnlsTol = .1, msVerbose = TRUE)
)
z <- VarCorr(fitODE)
expect_equal(signif(as.numeric(fitODE$logLik),6), -26146)
expect_equal(signif(AIC(fitODE), 6), 52305.9)
expect_equal(signif(BIC(fitODE), 6), 52351)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[1]),3), 1.39)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[2]),3), 4.2)
expect_equal(signif(as.numeric(fitODE$coefficients$fixed[3]),3), -0.0123)
expect_equal(signif(as.numeric(z[1, "StdDev"]), 3), 0.264)
expect_equal(signif(as.numeric(z[2, "StdDev"]), 3), 0.281)
expect_equal(signif(as.numeric(z[3, "StdDev"]), 3), 0.343)
expect_equal(signif(fitODE$sigma, 3), 0.198)
signif(as.numeric(fitODE$logLik),6)
signif(AIC(fitODE), 6)
signif(BIC(fitODE), 6)
Sys.setenv(NLMIXR_VALIDATION_FULL="true")
Sys.setenv(NLMIXR_VALIDATION="true")
test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
Sys.setenv(NLMIXR_VALIDATION_FULL="true")
Sys.setenv(NLMIXR_VALIDATION="true")
testthat::test_dir("E:/Occams/Local/General/nlmixr/nlmixr/tests/testthat/")
